<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the first button in a Spark ButtonBar component.  

@see spark.components.ButtonBar
@see spark.components.ButtonBarButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21"
			 alpha.disabledStates="0.5">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ButtonBarButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
        
		/* Define the skin elements that should not be colorized. 
		For toggle button, the graphics are colorized but the label is not. */
		static private const exclusions:Array = ["labelDisplay"];
		
		/** 
		 * @private
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
		{
			var cr:Number = getStyle("cornerRadius");
			
			if (cornerRadius != cr)
			{
				cornerRadius = cr;
				fill.topLeftRadiusX = cornerRadius;
				fill.bottomLeftRadiusX = cornerRadius;
				border.topLeftRadiusX = cornerRadius;
				border.topRightRadiusX = cornerRadius;
			}
			
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number = 2;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<s:Group left="-1" right="0" top="-1" bottom="-1">
		
		<!-- layer 2: fill -->
		<!--- @private -->
		<s:Rect id="fill" left="0" right="0" top="0" bottom="0" topLeftRadiusX="2" topRightRadiusX="2" includeIn="selectedStates">
			<s:fill>
				<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xFFFFFF" 
									  />
					<s:GradientEntry color="0xFFFFFF" 
									  />
				</s:LinearGradient>
			</s:fill>
		</s:Rect>
				
		<!-- layer 7: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
		<!--- @private -->
		<s:Rect left="1" right="1" top="1" bottom="2" 
				topLeftRadiusX="2" topRightRadiusX="2" includeIn="overStates, selectedStates">
			<s:stroke>
				<s:LinearGradientStroke rotation="90">
					<s:GradientEntry color="0xFFFFFF" ratio="0.85" 
									 />
					<s:GradientEntry color="0xFFFFFF" alpha="0"
									 />
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>
		<s:Rect id="border" left="0" right="0" top="0" bottom="2" 
				topLeftRadiusX="2" topRightRadiusX="2" includeIn="overStates, selectedStates">
			<s:stroke>
				<s:LinearGradientStroke rotation="90">
					<s:GradientEntry color="0xB6BABF" ratio="0.85" 
									 />
					<s:GradientEntry color="0xFFFFFF" alpha="0"
									 />
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>
		<s:Line left="-1" bottom="0" xFrom="0" yFrom="0" xTo="2" yTo="-4" includeIn="selectedStates">
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" />
			</s:stroke>
		</s:Line>
		<s:Line left="-2" bottom="0" xFrom="0" yFrom="0" xTo="2" yTo="-4" includeIn="selectedStates">
			<s:stroke>
				<s:SolidColorStroke color="0xB6BABF" />
			</s:stroke>
		</s:Line>
		<s:Line right="-1" bottom="0" xFrom="0" yFrom="-4" xTo="2" yTo="0" includeIn="selectedStates">
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" />
			</s:stroke>
		</s:Line>
		<s:Line right="-2" bottom="0" xFrom="0" yFrom="-4" xTo="2" yTo="0" includeIn="selectedStates">
			<s:stroke>
				<s:SolidColorStroke color="0xB6BABF" />
			</s:stroke>
		</s:Line>
		<s:Line left="1" bottom="2" xFrom="0" yFrom="-1" xTo="0" yTo="-6" includeIn="over">
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" />
			</s:stroke>
		</s:Line>
		<s:Line left="0" bottom="1" xFrom="0" yFrom="-1" xTo="0" yTo="-6" includeIn="over">
			<s:stroke>
				<s:SolidColorStroke color="0xB6BABF" />
			</s:stroke>
		</s:Line>
		<s:Line right="1" bottom="2" xFrom="0" yFrom="-6" xTo="0" yTo="-1" includeIn="over">
			<s:stroke>
				<s:SolidColorStroke color="0xFFFFFF" />
			</s:stroke>
		</s:Line>
		<s:Line right="0" bottom="1" xFrom="0" yFrom="-6" xTo="0" yTo="-1" includeIn="over">
			<s:stroke>
				<s:SolidColorStroke color="0xB6BABF" />
			</s:stroke>
		</s:Line>
	</s:Group>
	
	<!-- layer 8: text -->
	<!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle"
			 maxDisplayedLines="1" color="0x4B4B4B"
			 horizontalCenter="0" verticalCenter="1"
			 left="10" right="10" top="2" bottom="2">
	</s:Label>
	
</s:SparkSkin>
