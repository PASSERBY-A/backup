<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<mx:RemoteObject  id="srv" destination="relationService">
			<mx:method  name="getModelRelationsByModelId" result="resultHandler(event)" fault="faultHandler(event)"/>
		</mx:RemoteObject>
		
		<mx:RemoteObject  id="srv1" destination="modelService">
			<mx:method  name="getModelAttributesByModelId" result="resultHandler1(event)" fault="faultHandler(event)"/>
		</mx:RemoteObject>
		
	</fx:Declarations>
	<s:VGroup height="100%" width="100%" paddingLeft="20" paddingRight="20" paddingTop="20" paddingBottom="20">
		<s:Label text="基本属性" width="100%" styleName="LabelTitle" height="30"/>
		<s:HGroup width="100%">
			<s:VGroup id="restTypeContent1" width="33%" gap="15" paddingLeft="10" paddingTop="10">
			</s:VGroup>
			<s:VGroup width="33%" id="restTypeContent2" gap="15"  paddingLeft="10" paddingTop="10">
			</s:VGroup>
			<mx:DataGrid width="33%" dataProvider="{modelrelations}" id="relationgrid" focusEnabled="false">
				<mx:columns>
					<mx:DataGridColumn headerText="关系" dataField="modelName" width="80"/>
					<mx:DataGridColumn headerText="关联模型" dataField="modelName2"/>
				</mx:columns>
			</mx:DataGrid>
		</s:HGroup>
		<s:Label text="关联字段" width="100%" styleName="LabelTitle" height="30"/>
		<mx:DataGrid width="100%" height="100%" id="attributegrid" dataProvider="{modelattribute}" focusEnabled="false">
			<mx:columns>
				<mx:DataGridColumn headerText="类型" dataField="modelId"/>
				<mx:DataGridColumn headerText="属性ID" dataField="attrId"/>
				<mx:DataGridColumn headerText="属性名称" dataField="name"/>
				<mx:DataGridColumn headerText="允许继承"  dataField="inheritable" labelFunction="labelFunction_Handle"/>
				<mx:DataGridColumn headerText="备注" dataField="remark"/>
			</mx:columns>
		</mx:DataGrid>
	</s:VGroup>
	<fx:Script>
		<![CDATA[
			import com.hp.idc.resm.model.Model;
			import com.hp.idc.resm.model.ModelAttribute;
			import com.hp.idc.resm.model.ModelRelation;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.HGroup;
			import spark.components.Label;
			
			
			//模型关系grid数据
			[Bindable]
			public var modelrelations:Array = new Array();
			
			//模型属性grid数据
			[Bindable]
			public var modelattribute:Array = new Array();
			
			private var data:Model;
			
			
			public function set model(model:Model):void{
				this.data = model;
				//基本信息置空
				restTypeContent1.removeAllElements();
				restTypeContent2.removeAllElements();
				
				//模型id
				var id_lable:Label = new Label();
				id_lable.text = "◆ 模型ID为 "+"["+model.id+"]";
				//模型父id
				var parentId_label:Label = new Label();
				parentId_label.text = "◆ 父模型ID为 "+"["+model.parentId+"]";
				//模型名称
				var name_label:Label = new Label();
				name_label.text = "◆ 模型名称为 "+"["+model.name+"]";
				
				var directory:Label = new Label();
				if(model.directoryOnly){
					directory.text = "◆ 该模型是一个目录"
				}else{
					directory.text = "◆ 该模型是一个资源对象模型"
				}
				
				var dim:Label = new Label();
				if(model.dimModel){
					dim.text = "◆ 该模型是一个维度模型";
				}else{
					dim.text = "◆ 该模型不是一个维度模型";
				}
				
				//模型状态
				var enabled:Label = new Label();
				if(model.enabled){
					enabled.text = "◆ 该模型使用正常";
				}else{
					enabled.text = "◆ 该模型已停用";
				}
				
				var hgroup:HGroup = new HGroup();
				hgroup.paddingLeft = 20;
				hgroup.gap = 20;
				var icon:Image = new Image();
				icon.width = 32;
				icon.height = 32;
				icon.source = "/resm/IconLibrary/"+model.icon;
				var largeIcon:Image = new Image();
				largeIcon.source = "/resm/IconLibrary/"+model.largeIcon;
				largeIcon.width = 64;
				largeIcon.height = 64;
				hgroup.addElement(icon);
				hgroup.addElement(largeIcon);
				
				restTypeContent1.addElement(id_lable);
				if(model.parentId!=""){
					restTypeContent1.addElement(parentId_label);
				}
				restTypeContent1.addElement(name_label);
				restTypeContent1.addElement(directory);
				//restTypeContent1.addElement(dim);
				//restTypeContent1.addElement(dim);
				
				
				var iconLabel:Label = new Label();
				iconLabel.text = "◆ 显示图标：";
				restTypeContent2.addElement(enabled);
				restTypeContent2.addElement(iconLabel);
				restTypeContent2.addElement(hgroup);
				
				
				srv.getModelRelationsByModelId(model.id);
				srv1.getModelAttributesByModelId(model.id);
			}
			
			private function resultHandler(event:ResultEvent):void{
				var list : ArrayCollection = event.result as ArrayCollection;
				relationgrid.dataProvider = list;
			}
			
			private function resultHandler1(event:ResultEvent):void{
				modelattribute = new Array();
				modelattribute.pop();
				var list:ArrayCollection = event.result as ArrayCollection;
				for(var i : int = 0;i<list.length;i++){
					var ma :ModelAttribute = list.getItemAt(i) as ModelAttribute;
					//modelattribute.push({name:ma.name,type:data.name,inheritable:ma.inheritable,remark:ma.remark});
					modelattribute.push(ma);
				}
				attributegrid.dataProvider = modelattribute;
			}
			
			private function labelFunction_Handle(item:Object, column:DataGridColumn):String{
				if(item.inheritable as Boolean){
					return "是";
				}else{
					return "否";
				}
			}
			
			private function faultHandler(event:FaultEvent):void{
				Alert.show(event.fault.getStackTrace(),"错误");
			}
		]]>
	</fx:Script>
</s:NavigatorContent>
