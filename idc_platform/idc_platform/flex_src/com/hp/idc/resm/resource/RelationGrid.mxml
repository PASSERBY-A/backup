<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:components="com.hp.idc.components.*"
			   xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
			   xmlns:lc="org.un.cava.birdeye.ravis.components.ui.controls.layouterControls.*"
			   xmlns:vc="org.un.cava.birdeye.ravis.components.ui.controls.vgraphControls.*"
			   xmlns:ui="org.un.cava.birdeye.ravis.components.ui.*"
			   xmlns:dp="org.un.cava.birdeye.ravis.components.ui.dataPresentation.*"
			   xmlns:flexlib="http://code.google.com/p/flexlib/"
			   width="500" height="400"
			   close="PopUpManager.removePopUp(this);"
			   creationComplete="titlewindow1_creationCompleteHandler(event)"
			   title="资源关联关系" xmlns:local="*" xmlns:resource="com.hp.idc.resm.resource.*"
			   >
	<fx:Script>
		<![CDATA[
			import com.hp.idc.components.HtRemoteObject;
			import com.hp.idc.components.PetAlert;
			import com.hp.idc.resm.model.RelationDefine;
			import com.hp.idc.ui.FaultHandler;
			import com.hp.idc.util.UserTool;
			import com.hp.idc.util.json.JSON;
			
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			public var resourceId:int;

			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				relationService.getRelationsWithModelByResId(resourceId, UserTool.userId);
				relationService.getAllRelationDefines();
				relationService.getRelationsByResourceId(this.resourceId);
			}

			private function resultHandler(event:ResultEvent):void {
				resRelations = event.result as ArrayCollection;
			}

			private function resultHandler1(event:ResultEvent):void {
				relationDefines = event.result as ArrayCollection;
			}
			
			private function resultHandler2(event:ResultEvent):void {
				resModelRelations = event.result as ArrayCollection;
			}
			
			protected function addRelation_clickHandler(event:MouseEvent):void
			{
				var o:ResourceRelation = new ResourceRelation();
				o.itemId = this.resourceId;
				o.itemId2 = -1;
				o.relationId = "";
				relationGrid.dataProvider.addItem(o);		
			}


			protected function saveRelation_clickHandler(event:MouseEvent):void
			{
				var remoteOperation:HtRemoteObject = new HtRemoteObject("relationUpdateService", null, false, true);
				remoteOperation.onFault = FaultHandler.defaultFaultHandler;
				remoteOperation.onResult = function():void{PetAlert.show("关联关系添加成功！", "操作结果", 4, null, function():void{
				}, PetAlert.ICON_INFO);};
				remoteOperation.call("updateResourceRelation",resourceId, relationGrid.dataProvider, UserTool.userId);
			}

			protected function delRelation_clickHandler(event:MouseEvent):void
			{
				relationGrid.dataProvider.removeItemAt(relationGrid.selectedIndex);
			}
			
			private function comboLabelFunction(item:Object,col:GridColumn):String{
				if(col.dataField == 'relationId'){
					for each(var rd:RelationDefine in relationDefines){
						if(rd.id == item[col.dataField])
							return rd.name;
					}
				} else {
					for each(var r:ResourceObject in resModelRelations){
						if(r.id == item[col.dataField])
							return r.name
					}
				}
				return item[col.dataField];
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:ArrayCollection id="resRelations" />
		<s:ArrayCollection id="relationDefines" />
		<s:ArrayCollection id="resModelRelations" />
		<s:RemoteObject id="relationService" destination="relationService">
			<s:method name="getRelationsByResourceId" result="resultHandler(event)" fault="FaultHandler.defaultFaultHandler(event)" />
			<s:method name="getAllRelationDefines" result="resultHandler1(event)" fault="FaultHandler.defaultFaultHandler(event)" />
			<s:method name="getRelationsWithModelByResId" result="resultHandler2(event)" fault="FaultHandler.defaultFaultHandler(event)" />
		</s:RemoteObject>
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%">
			<s:Button skinClass="com.hp.idc.skins.LinkButtonSkin" label="增加" id="addRelation" click="addRelation_clickHandler(event)" />
			<s:Button skinClass="com.hp.idc.skins.LinkButtonSkin" label="删除" id="delRelation" click="delRelation_clickHandler(event)" />
		</s:HGroup>
		<s:BorderContainer borderStyle="solid" width="100%" height="100%" borderColor="#CCCCCC" backgroundColor="#FFFFFF">
			<s:DataGrid id="relationGrid" width="100%" height="100%" editable="true" horizontalScrollPolicy="auto" dataProvider="{resRelations}">
				<s:columns>
					<s:ArrayCollection>
						<s:GridColumn headerText="对象" dataField="itemId" labelFunction="comboLabelFunction">
							<s:itemEditor>
								<fx:Component>
									<resource:RelationGridComboBoxItemEditor dataProvider="{outerDocument.resModelRelations}" /> 
								</fx:Component>
							</s:itemEditor>
						</s:GridColumn>
						<s:GridColumn headerText="关联名称" dataField="relationId" labelFunction="comboLabelFunction">
							<s:itemEditor>
								<fx:Component>
									<resource:RelationGridComboBoxItemEditor dataProvider="{outerDocument.relationDefines}" /> 
								</fx:Component>
							</s:itemEditor>
						</s:GridColumn>
						<s:GridColumn headerText="关联对象" dataField="itemId2" labelFunction="comboLabelFunction">
							<s:itemEditor>
								<fx:Component>
									<resource:RelationGridComboBoxItemEditor dataProvider="{outerDocument.resModelRelations}" /> 
								</fx:Component>
							</s:itemEditor>
						</s:GridColumn>
						<s:GridColumn headerText="说明" dataField="remark"/>
					</s:ArrayCollection>
				</s:columns>
			</s:DataGrid>
		</s:BorderContainer>
		<s:HGroup width="100%">
			<s:Spacer width="100%" />
			<s:Button id="saveRelation" label="保存" click="saveRelation_clickHandler(event)" />
			<s:Button id="closeButton" label="关闭" click="PopUpManager.removePopUp(this);" />
		</s:HGroup>
	</s:VGroup>
	
</s:TitleWindow>
