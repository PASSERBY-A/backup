<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:components="com.hp.idc.components.*"
			   close="PopUpManager.removePopUp(this);"
			   creationComplete="titlewindow1_creationCompleteHandler(event)"
			   width="400" height="300">
	<fx:Script>
		<![CDATA[
			import com.hp.idc.components.HtRemoteObject;
			import com.hp.idc.ui.FaultHandler;
			import com.hp.idc.util.UserTool;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColorStroke;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.BorderContainer;
			import spark.components.Group;
			import spark.components.HGroup;
			import spark.components.supportClasses.TextBase;
			import spark.primitives.Rect;
			
			[Bindable]
			public var rackId:int;

			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void
			{
				var remoteService:HtRemoteObject = new HtRemoteObject("resourceService",null,false,true);
				remoteService.onFault = FaultHandler.defaultFaultHandler;
				remoteService.onResult = resultHandler;
				remoteService.call("getRackDetail",rackId, UserTool.userId);
			}
			
			private function resultHandler(event:ResultEvent):void{
				var rackDetail:XML = XML(event.result);
				var slots:XMLList = rackDetail.children();
				var line:int = int(slots.length() / 16);
				var _line:Number = Number(slots.length() / 16);
				if(_line > 0)
					line = line + 1;
				for(var j:int=0;j< line;j++){
					var hg:HGroup = new HGroup();
					hg.paddingLeft = 20;
					hg.width = 360;
					hg.height = 30;
					hg.gap = 1;
					var length:int = (j+1)*16;
					if((j+1)*16 > slots.length())
						length = slots.length();
					for(var i:int = j*16; i<length;i++){
						if(slots[i] == null)
							break;
						var label:Label = new Label();
						label.text = slots[i].order;
						var rect:BorderContainer = new BorderContainer();
						rect.toolTip = slots[i].detail;
						rect.width = 20;
						rect.height = 30;
						if(slots[i].status == '使用中')
							rect.setStyle("backgroundColor","red");
						else if(slots[i].status == '预占')
							rect.setStyle("backgroundColor","yellow");
						else if(slots[i].status == '实占')
							rect.setStyle("backgroundColor","blue");
						else if(slots[i].status == '已占用')
							rect.setStyle("backgroundColor","green");
						else
							rect.setStyle("backgroundColor","white");
						rect.addElement(label);
						hg.addElement(rect);
					}
					rackDetailGrop.addElement(hg);
				}
			}


			protected function linkbutton1_clickHandler(event:MouseEvent):void
			{
				PopUpManager.removePopUp(this);
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" gap="5" paddingTop="10">
		<s:HGroup width="100%" gap="20" paddingLeft="20">
			<s:BorderContainer backgroundColor="white" width="40" height="20">
				<mx:Text text="空闲" />
			</s:BorderContainer>
			<s:BorderContainer backgroundColor="red" width="40" height="20">
				<mx:Text text="使用中" />
			</s:BorderContainer>
			<s:BorderContainer backgroundColor="green" width="40" height="20">
				<mx:Text text="已占用" />
			</s:BorderContainer>
			<s:BorderContainer backgroundColor="yellow" width="40" height="20">
				<mx:Text text="预占" />
			</s:BorderContainer>
			<s:BorderContainer backgroundColor="blue" width="40" height="20">
				<mx:Text text="实占" />
			</s:BorderContainer>
			<s:Spacer width="100%" />
			<mx:LinkButton label="关闭" click="linkbutton1_clickHandler(event)" />
		</s:HGroup>
		<components:HSplitLine width="100%"/>
		<s:VGroup width="100%" height="100%" id="rackDetailGrop" gap="10" />
	</s:VGroup>
</s:TitleWindow>
